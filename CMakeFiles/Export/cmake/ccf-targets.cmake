# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.17)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget ccfcrypto.enclave ccfcrypto.host secp256k1.enclave secp256k1.host sss.enclave sss.host lua.enclave lua.host http_parser.enclave http_parser.host aft.enclave aft.virtual ccf.enclave ccf.virtual)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target ccfcrypto.enclave
add_library(ccfcrypto.enclave STATIC IMPORTED)

set_target_properties(ccfcrypto.enclave PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:-nostdlib>;\$<LINK_ONLY:-nodefaultlibs>;\$<LINK_ONLY:-nostartfiles>;-Wl,--no-undefined;-Wl,-Bstatic,-Bsymbolic,--export-dynamic,-pie;\$<LINK_ONLY:openenclave::oeenclave-lvi-cfg>;\$<LINK_ONLY:openenclave::oecryptombedtls-lvi-cfg>;\$<LINK_ONLY:openenclave::oelibcxx-lvi-cfg>;\$<LINK_ONLY:openenclave::oelibc-lvi-cfg>;\$<LINK_ONLY:openenclave::oecryptoopenssl-lvi-cfg>"
)

# Create imported target ccfcrypto.host
add_library(ccfcrypto.host STATIC IMPORTED)

set_target_properties(ccfcrypto.host PROPERTIES
  INTERFACE_LINK_LIBRARIES "/usr/local/lib/libmbedtls.a;/usr/local/lib/libmbedx509.a;/usr/local/lib/libmbedcrypto.a"
)

# Create imported target secp256k1.enclave
add_library(secp256k1.enclave STATIC IMPORTED)

set_target_properties(secp256k1.enclave PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/3rdparty/secp256k1"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:openenclave::oelibc-lvi-cfg>"
)

# Create imported target secp256k1.host
add_library(secp256k1.host STATIC IMPORTED)

set_target_properties(secp256k1.host PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/3rdparty/secp256k1"
)

# Create imported target sss.enclave
add_library(sss.enclave STATIC IMPORTED)

# Create imported target sss.host
add_library(sss.host STATIC IMPORTED)

# Create imported target lua.enclave
add_library(lua.enclave STATIC IMPORTED)

set_target_properties(lua.enclave PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:openenclave::oelibc-lvi-cfg>"
)

# Create imported target lua.host
add_library(lua.host STATIC IMPORTED)

# Create imported target http_parser.enclave
add_library(http_parser.enclave STATIC IMPORTED)

set_target_properties(http_parser.enclave PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:openenclave::oelibc-lvi-cfg>"
)

# Create imported target http_parser.host
add_library(http_parser.host STATIC IMPORTED)

# Create imported target aft.enclave
add_library(aft.enclave STATIC IMPORTED)

set_target_properties(aft.enclave PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:openenclave::oeenclave-lvi-cfg>;\$<LINK_ONLY:openenclave::oecryptombedtls-lvi-cfg>;\$<LINK_ONLY:openenclave::oelibcxx-lvi-cfg>;\$<LINK_ONLY:openenclave::oelibc-lvi-cfg>;\$<LINK_ONLY:openenclave::oecryptoopenssl-lvi-cfg>"
)

# Create imported target aft.virtual
add_library(aft.virtual STATIC IMPORTED)

set_target_properties(aft.virtual PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "INSIDE_ENCLAVE;VIRTUAL_ENCLAVE;_LIBCPP_HAS_THREAD_API_PTHREAD"
  INTERFACE_LINK_LIBRARIES "/usr/local/lib/libmbedtls.a;/usr/local/lib/libmbedx509.a;/usr/local/lib/libmbedcrypto.a"
)

# Create imported target ccf.enclave
add_library(ccf.enclave STATIC IMPORTED)

set_target_properties(ccf.enclave PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "INSIDE_ENCLAVE;_LIBCPP_HAS_THREAD_API_PTHREAD;GET_QUOTE"
  INTERFACE_COMPILE_OPTIONS "-nostdinc;-nostdinc++"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/ccf/;${_IMPORT_PREFIX}/include/3rdparty/"
  INTERFACE_LINK_LIBRARIES "openenclave::oeenclave-lvi-cfg;openenclave::oecryptombedtls-lvi-cfg;openenclave::oelibcxx-lvi-cfg;openenclave::oelibc-lvi-cfg;openenclave::oecryptoopenssl-lvi-cfg;-static-libgcc;-lgcc;ccfcrypto.enclave;http_parser.enclave;lua.enclave;secp256k1.enclave;aft.enclave;sss.enclave"
  INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "include/ccf/;include/3rdparty/"
)

# Create imported target ccf.virtual
add_library(ccf.virtual STATIC IMPORTED)

set_target_properties(ccf.virtual PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "INSIDE_ENCLAVE;VIRTUAL_ENCLAVE;_LIBCPP_HAS_THREAD_API_PTHREAD"
  INTERFACE_COMPILE_OPTIONS "-stdlib=libc++"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/ccf/;${_IMPORT_PREFIX}/include/3rdparty/"
  INTERFACE_LINK_LIBRARIES "-lc++;-lc++abi;-lc++fs;-stdlib=libc++;-static-libgcc;-lgcc;ccfcrypto.host;http_parser.host;lua.host;secp256k1.host;aft.virtual;sss.host;openenclave::oehostverify;-lpthread;/usr/local/lib/libmbedtls.a;/usr/local/lib/libmbedx509.a;/usr/local/lib/libmbedcrypto.a"
  INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "include/ccf/;include/3rdparty/"
)

if(CMAKE_VERSION VERSION_LESS 2.8.12)
  message(FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/ccf-targets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
